{"name":"Pygamepoo2 ifexplode","tagline":"IFExplode!!!","body":"# Introdução e exposição do tema do trabalho\r\n\r\n## Proposta do trabalho \r\nO trabalho proposto aqui consiste em criar um jogo do estilo Plataforma em 2D utilizando a biblioteca pygame da linguagem python.\r\n\r\n### Oque é um jogo plataforma?    \r\n\r\nUm jogo plataforma se caracteriza por ter um Personagem principal que é controlado pelo jogador, e esse personagem deve poder se movimentar para direita, esquerda, para cima e para baixo pelo cenário do jogo, além de pular e ter uma simulação do conceito de gravidade que o puxa para baixo quando pular. Essa movimentação é oque possibilita que ele vença a altura e largura das plataformas, seguindo sempre em frente nas diversas Fases. Fases são sequencias de plataformas que devem ser vencidas para que se chegue ao fim da fase.\r\n\r\n## Entrega trabalho 0 - (04/10/2015)\r\n\r\n### Apresentação do Trabalho 0\r\n\r\nNo trabalho zero o grupo se preocupou em aprender e aplicar corretamente as várias funções pré definidas da biblioteca pygame. O foco aqui foi criar uma estrutura que atenda aos requisitos e conceitos de um jogo Plataforma 2D, criando:\r\n\r\n  * Personagem principal\r\n  * As plataformas\r\n  * Conceito de colisão entre o personagem principal e as plataformas\r\n  * Conceito de Fase\r\n  * Estrutura que possibilita a construção de várias fases\r\n  * Estrutura que possibilita dar para as fases propriedades próprias como:\r\n      * posicionamento diferente de plataformas\r\n      * fundo del tela da fase\r\n      * Posição de inicialização do personagem principal e de futuros objetos na fase\r\n      * Fazer a tela \"andar\" por meio de uma câmera simulada que segue sempre o jogador atualizando e redesenhando\r\n        as plataformas conforme o jogador movimenta o personagem\r\n  \r\n\r\n### Diagrama de classes\r\n\r\nAqui são apresentadas as classes que possibilitam os conceitos propostos acima:\r\n\r\nClasses do cdp:\r\n\r\nAs classes da imagem abaixo pertencem ao domínio do problema e algumas delas herdam alguns métodos e funções das classes 'sprite' e 'sprite.Sprite' da biblioteca do Pygame, tendo cada uma o seu próprio construtor adaptado para as necessidades deste trabalho.\r\n\r\nAs informações e explicações sobre essas funções e como utiliza-las podem ser encontradas em:\r\n\r\n[pygame.sprite.Sprite](http://www.pygame.org/docs/ref/sprite.html)\r\n\r\n![](https://github.com/Ldipr3/PygamePOO2_IFExplode/blob/master/br/edu/ifes/IFExplode/Modelos_Diagramas/Class%20Diagram_cdp.png?raw=true)\r\n   \r\n\r\n\r\n### Aplicação do MVC\r\n\r\nExplicação de como o padrão MVC foi utilizado:\r\n\r\n\r\n### Avaliação de código\r\n\r\nPrimeira vez que o código passou no sonar:\r\n\r\n![](https://github.com/Ldipr3/PygamePOO2_IFExplode/blob/master/br/edu/ifes/IFExplode/Modelos_Diagramas/Sonar_IFExplode.png?raw=true)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}